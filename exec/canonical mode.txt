Excellent â€” diving into canonical mode, echo mode, and terminal behavior is exactly what will make you understand reset_terminal_mode() and terminal bugs. Here's a deep, low-level explanation.

ðŸ§  TL;DR Summary (for orientation)
Canonical mode = line-by-line input.

Non-canonical mode = character-by-character input.

Echo mode = characters are shown on screen when typed.

readline() and other interactive programs modify these modes.

If you donâ€™t restore the terminal settings, your shell becomes glitchy or invisible to the user.

ðŸ§± Terminal Input Modes â€” Under the Hood
Every terminal on Unix-like systems is governed by a data structure:

c
Copy
Edit
struct termios
This struct stores how input and output are handled in the terminal â€” it's part of the POSIX terminal interface, also known as the termios API.

You control it using:

c
Copy
Edit
#include <termios.h>
int tcgetattr(int fd, struct termios *termios_p); // get current settings
int tcsetattr(int fd, int optional_actions, const struct termios *termios_p); // set new ones
ðŸ”¹ 1. Canonical vs Non-Canonical Mode
This controls how input is read from the terminal.

ðŸ”¸ Canonical Mode (ICANON flag is ON)
âœ… This is the default mode of terminals.

Input is buffered until the user presses Enter (newline).

The entire line becomes available in one go.

Special characters like Backspace, Ctrl+D, and Ctrl+C are interpreted by the terminal.

ðŸ§ª Example:

When you're at a normal shell prompt and type:

bash
Copy
Edit
echo hello world
You can backspace.

Nothing happens until you hit Enter.

The shell receives the entire line: "echo hello world\n".

ðŸ”¸ Non-Canonical Mode (ICANON flag is OFF)
ðŸš« Input is processed character-by-character, without waiting for newline.

No buffering â€” each character is passed immediately to the program.

You have to handle everything yourself: backspaces, line breaks, etc.

ðŸ§ª This mode is used by:

readline() (under the hood)

Games (e.g. reading arrow keys in real-time)

Your heredoc child process while typing multiline input

ðŸ”Ž In this mode:

Typing "hello" sends 'h', 'e', 'l', 'l', 'o' immediately.

Pressing Backspace sends '\b', and your program must manually erase it from the screen.

ðŸ”¹ 2. Echo Mode (ECHO flag)
This controls whether typed characters appear on screen as you type them.

ðŸ”¸ Echo Mode ON (ECHO flag is ON)
âœ… The terminal prints every character you type.

ðŸ§ª You type ls â†’ terminal echoes:

bash
Copy
Edit
ls
ðŸ”¸ Echo Mode OFF (ECHO flag is OFF)
ðŸš« What you type is not shown.

ðŸ§ª Used in:

Password prompts

Secure input

readline() under special modes (like heredoc)

If ECHO is off and you type ls, nothing appears.

ðŸ”§ How Does This Affect You?
Programs like readline(), and even simple read() loops in non-canonical mode, may disable ICANON and ECHO so they can take full control of input.

But they donâ€™t always restore the settings when they exit.

This means your shell is left in:

Non-canonical mode (no line buffering)

No echo (invisible input)

So the shell looks like itâ€™s frozen or buggy.
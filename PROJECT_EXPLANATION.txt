===========================================================================================
                             MINI_SHELL PROJECT COMPREHENSIVE EXPLANATION
===========================================================================================

PROJECT OVERVIEW
==================
Mini_shell is a simplified implementation of the bash shell, built in C as part of the 42 school 
curriculum. It replicates core shell functionality including command parsing, execution, built-in 
commands, environment variable management, redirections, pipes, and heredocs.

===========================================================================================
PROJECT STRUCTURE & ARCHITECTURE
===========================================================================================

DIRECTORY STRUCTURE:
├── main.c                     # Main entry point and shell loop
├── minishell.h               # Header file with all structure definitions
├── Makefile                  # Build system configuration  
├── get_next_line.c/.h        # Line reading utilities for heredocs
├── tests.txt                 # Comprehensive test cases
├── libft/                    # Custom C library with utility functions
├── parsing/                  # All parsing and lexical analysis modules
│   ├── main_parsing.c        # Main lexer and tokenizer
│   ├── lexing.c             # Token creation and management
│   ├── parse.c              # Command structure parsing
│   ├── env2.c               # Environment variable expansion
│   ├── environement.c       # Environment utilities
│   └── helper_function.c    # Parsing utility functions
├── exec/                     # Command execution modules
│   ├── execution_main.c      # Main execution logic with pipes
│   ├── execution_child.c     # Child process management
│   ├── execution_child_utils.c # Child process utilities
│   ├── exec_redir.c         # Redirection handling
│   ├── heredoc.c            # Here-document implementation
│   ├── heredoc_helper.c     # Heredoc utilities
│   ├── expand_heredoc.c     # Variable expansion in heredocs
│   ├── path_resolver.c      # Command path resolution
│   ├── path_splitter.c      # PATH environment variable parsing
│   └── utils.c              # General execution utilities
└── builtins/                 # Built-in command implementations
    ├── main_builtin.c        # Built-in command dispatcher
    ├── builtin_utils_1.c     # Built-in utilities and redirection handling
    ├── cd.c                  # Change directory implementation
    ├── echo.c                # Echo command with -n flag support
    ├── env.c                 # Environment variable printing
    ├── exit.c                # Shell exit command
    ├── export.c              # Environment variable export
    ├── export_utils.c        # Export utilities
    ├── pwd.c                 # Print working directory
    └── unset.c               # Environment variable removal

===========================================================================================
CORE DATA STRUCTURES
===========================================================================================

1. TOKEN STRUCTURE (t_token):
   - Represents parsed input elements
   - Fields:
     * token: string content
     * type: WORD, PIPE, REDIR_IN, REDIR_OUT, APPEND, HEREDOC
     * space: tracks spacing for word merging
     * quote: indicates if token was quoted
     * next: linked list pointer

2. COMMAND STRUCTURE (t_cmd):
   - Represents executable commands
   - Fields:
     * args: array of command arguments
     * redir: linked list of redirections
     * next: for pipeline commands

3. REDIRECTION STRUCTURE (t_redir):
   - Handles input/output redirections
   - Fields:
     * filename: target file for redirection
     * type: REDIR_IN (<), REDIR_OUT (>), APPEND (>>), HEREDOC (<<)
     * quoted: prevents expansion if true
     * fd: file descriptor array for heredocs

4. ENVIRONMENT STRUCTURE (t_env):
   - Manages environment variables
   - Fields:
     * key: variable name
     * value: variable value
     * next: linked list pointer

5. EXECUTION STRUCTURE (t_exec):
   - Execution context and state
   - Fields:
     * env_lst: environment variables list
     * env_arr: environment as char** for execve()
     * pipe_fd: pipe file descriptors
     * stdin_backup/stdout_backup: original file descriptors
     * last_pid: for exit status tracking
     * is_pipe: indicates pipeline execution

===========================================================================================
MAIN EXECUTION FLOW
===========================================================================================

1. INITIALIZATION:
   - Collect environment variables from char **env
   - Set up signal handlers
   - Initialize stdin/stdout backups

2. MAIN SHELL LOOP (main.c):
   ```
   while (1) {
       input = readline("[MINI_SHELL]$> ");
       if (!input) break;  // Ctrl+D
       
       if (all_space(input)) continue;  // Skip empty input
       
       // Parse input into tokens and commands
       if (!parsing_function(&token, input, &cmd, &envr)) {
           handle_error();
           continue;
       }
       
       // Handle heredocs first
       if (!check_heredocs(cmd, envr)) continue;
       
       // Execute built-ins or external commands
       if (builtin_check_execute(cmd, &exec, &envr)) continue;
       if (!execution_main(&exec, cmd, envr)) handle_error();
       
       // Cleanup and restore file descriptors
       cleanup(token, cmd, input, NULL);
       restore_file_descriptors();
   }
   ```

===========================================================================================
PARSING SYSTEM
===========================================================================================

The parsing system transforms raw input into executable command structures through 
multiple phases:

1. LEXICAL ANALYSIS (lexing.c, main_parsing.c):
   - Tokenizes input string into discrete elements
   - Handles quotes, operators, variables, and words
   - Manages spacing for proper token merging
   - Supports variable expansion during tokenization

2. TOKEN TYPES:
   - WORD: Regular command arguments
   - PIPE: Pipeline operator (|)
   - REDIR_IN: Input redirection (<)
   - REDIR_OUT: Output redirection (>)
   - APPEND: Append redirection (>>)
   - HEREDOC: Here-document (<<)

3. QUOTE HANDLING:
   - Single quotes: No expansion, literal text
   - Double quotes: Variable expansion allowed
   - Quote removal after processing

4. VARIABLE EXPANSION:
   - $VAR syntax for environment variables
   - $? for exit status
   - Expansion context awareness (heredocs vs normal)

5. COMMAND PARSING (parse.c):
   - Converts tokens into command structures
   - Handles pipeline creation
   - Manages redirection assignment
   - Validates syntax (empty pipes, missing files)

===========================================================================================
EXECUTION SYSTEM
===========================================================================================

1. PIPELINE EXECUTION (execution_main.c):
   - Creates pipes between commands
   - Forks child processes for each command
   - Manages file descriptor passing
   - Handles process synchronization

2. CHILD PROCESS MANAGEMENT (execution_child.c):
   - Sets up signal handlers
   - Processes redirections
   - Executes built-ins or external commands
   - Handles execution errors and cleanup

3. PATH RESOLUTION (path_resolver.c):
   - Searches PATH environment variable
   - Handles absolute and relative paths
   - Checks file permissions and accessibility
   - Falls back to current directory search

4. REDIRECTION HANDLING (exec_redir.c):
   - Opens files with appropriate modes
   - Duplicates file descriptors
   - Handles multiple redirections
   - Manages file descriptor cleanup

===========================================================================================
BUILT-IN COMMANDS
===========================================================================================

1. ECHO:
   - Supports -n flag (no trailing newline)
   - Multiple -n flags handled correctly
   - Space-separated argument joining
   - Proper quote handling

2. CD:
   - HOME directory navigation (cd, cd ~)
   - Previous directory (cd -)
   - Relative and absolute paths
   - Updates PWD and OLDPWD variables
   - Error handling for invalid paths

3. PWD:
   - Prints current working directory
   - Uses PWD environment variable if available
   - Falls back to getcwd() system call

4. ENV:
   - Prints all environment variables
   - Format: KEY=VALUE
   - Handles special "_" variable

5. EXPORT:
   - Sets environment variables
   - Supports append syntax (VAR+=value)
   - Variable name validation
   - Prints sorted variables when no args

6. UNSET:
   - Removes environment variables
   - Validates variable names
   - Protects special variables like "_"

7. EXIT:
   - Exits shell with specified status
   - Validates numeric arguments
   - Handles too many arguments
   - Proper cleanup before exit

===========================================================================================
REDIRECTION SYSTEM
===========================================================================================

1. INPUT REDIRECTION (<):
   - Redirects stdin from specified file
   - File existence validation
   - Permission checking

2. OUTPUT REDIRECTION (>):
   - Redirects stdout to specified file
   - Creates or truncates target file
   - Handles write permissions

3. APPEND REDIRECTION (>>):
   - Appends stdout to specified file
   - Creates file if it doesn't exist
   - Preserves existing content

4. HERE-DOCUMENTS (<<):
   - Reads input until delimiter
   - Supports variable expansion
   - Handles quoted delimiters (no expansion)
   - Signal handling during input

===========================================================================================
HEREDOC IMPLEMENTATION
===========================================================================================

1. HEREDOC PROCESSING:
   - Separate process for each heredoc
   - Pipe communication with parent
   - Line-by-line reading with get_next_line
   - Delimiter matching and termination

2. VARIABLE EXPANSION IN HEREDOCS:
   - Conditional expansion based on delimiter quoting
   - Supports $VAR and $? expansion
   - Maintains original formatting

3. SIGNAL HANDLING:
   - SIGINT handling during heredoc input
   - Proper cleanup on interruption
   - Parent-child signal coordination

===========================================================================================
ENVIRONMENT VARIABLE SYSTEM
===========================================================================================

1. ENVIRONMENT COLLECTION:
   - Converts char**env to linked list
   - Maintains key-value pairs
   - Supports dynamic modification

2. VARIABLE EXPANSION:
   - $VAR syntax support
   - $? for exit status
   - Context-aware expansion (quotes, heredocs)
   - Empty variable handling

3. SPECIAL VARIABLES:
   - PWD: Current working directory
   - OLDPWD: Previous directory
   - HOME: User home directory
   - PATH: Command search paths
   - _: Last executed command

===========================================================================================
SIGNAL HANDLING
===========================================================================================

1. INTERACTIVE MODE:
   - SIGINT (Ctrl+C): New prompt line
   - SIGQUIT (Ctrl+\): Ignored
   - EOF (Ctrl+D): Clean shell exit

2. COMMAND EXECUTION:
   - Child processes: Default signal behavior
   - Pipeline interruption handling
   - Signal propagation to child processes

3. HEREDOC MODE:
   - Special SIGINT handling
   - Cleanup and termination
   - Parent notification

===========================================================================================
MEMORY MANAGEMENT
===========================================================================================

1. CLEANUP FUNCTIONS:
   - free_tokens(): Token list cleanup
   - free_cmd(): Command structure cleanup
   - free_env(): Environment list cleanup
   - free_redir(): Redirection list cleanup

2. ERROR HANDLING:
   - Allocation failure checking
   - Partial cleanup on errors
   - Memory leak prevention

3. RESOURCE MANAGEMENT:
   - File descriptor cleanup
   - Process termination
   - Signal handler restoration

===========================================================================================
ERROR HANDLING
===========================================================================================

1. SYNTAX ERRORS:
   - Quote mismatch detection
   - Pipe syntax validation
   - Redirection syntax checking
   - Missing file arguments

2. RUNTIME ERRORS:
   - Command not found
   - Permission denied
   - File access errors
   - Fork/pipe failures

3. ERROR REPORTING:
   - Descriptive error messages
   - Proper exit status setting
   - Error output to stderr

===========================================================================================
TESTING FRAMEWORK
===========================================================================================

The tests.txt file contains comprehensive test cases covering:

1. Basic command execution
2. Built-in command functionality
3. Environment variable handling
4. Quoting and expansion
5. Redirection operations
6. Pipeline functionality
7. Heredoc operations
8. Error conditions
9. Edge cases and special scenarios
10. Signal handling tests

===========================================================================================
COMPILATION AND BUILD SYSTEM
===========================================================================================

MAKEFILE FEATURES:
- Automatic source file collection
- Dependency management with libft
- Debug flag support (-fsanitize=address)
- Clean and rebuild targets
- Readline library integration

BUILD PROCESS:
1. Compile libft library
2. Compile source files with appropriate flags
3. Link with readline and libft libraries
4. Generate minishell executable

DEPENDENCIES:
- libft: Custom C library
- readline: Command line editing and history
- Standard C libraries (stdio, unistd, stdlib, etc.)

===========================================================================================
KEY FEATURES IMPLEMENTED
===========================================================================================

✅ Command parsing and execution
✅ Built-in commands (echo, cd, pwd, env, export, unset, exit)
✅ Environment variable management
✅ Variable expansion ($VAR, $?)
✅ Single and double quote handling
✅ Input/Output redirection (<, >, >>)
✅ Here-documents (<<) with expansion
✅ Pipelines (|) with multiple commands
✅ Signal handling (Ctrl+C, Ctrl+D, Ctrl+\)
✅ Command history (readline integration)
✅ Path resolution and command search
✅ Error handling and reporting
✅ Memory management and cleanup
✅ Exit status tracking

===========================================================================================
ADVANCED FEATURES
===========================================================================================

1. WORD MERGING:
   - Combines adjacent tokens without spaces
   - Handles quote concatenation
   - Variable expansion merging

2. AMBIGUOUS REDIRECTION DETECTION:
   - Prevents multiple input redirections
   - Validates redirection syntax
   - Error reporting for conflicts

3. HEREDOC EXPANSION:
   - Context-aware variable expansion
   - Quoted delimiter handling
   - Line-by-line processing

4. PIPELINE OPTIMIZATION:
   - Efficient pipe creation
   - Process synchronization
   - Resource cleanup

===========================================================================================
LEARNING OBJECTIVES ACHIEVED
===========================================================================================

1. SYSTEM PROGRAMMING:
   - Process management (fork, exec, wait)
   - File descriptor manipulation
   - Signal handling
   - Inter-process communication (pipes)

2. C PROGRAMMING:
   - Dynamic memory management
   - Linked list operations
   - String manipulation
   - Error handling patterns

3. SHELL INTERNALS:
   - Command parsing algorithms
   - Environment variable systems
   - Redirection mechanisms
   - Pipeline implementation

4. SOFTWARE ARCHITECTURE:
   - Modular design principles
   - Clean code organization
   - Separation of concerns
   - Maintainable code structure

===========================================================================================
CONCLUSION
===========================================================================================

This Mini_shell project successfully implements a functional shell with most essential 
features of bash. The codebase demonstrates solid understanding of system programming 
concepts, proper C programming practices, and shell internals. The modular architecture 
makes the code maintainable and extensible, while comprehensive error handling ensures 
robust operation.

The project serves as an excellent foundation for understanding how command-line 
interpreters work and provides hands-on experience with low-level system programming 
concepts that are crucial for systems software development.

===========================================================================================
